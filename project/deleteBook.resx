<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>